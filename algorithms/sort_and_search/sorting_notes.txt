applications: 
- searching - binary search on sorted records is O(n) 
- finding two closest points in a sorted array 
- element uniqueness - are there any duplicates? 
- frequency distribution 
- selection - what is the kth largest item in the array. 

ordering in sorting: 
- increasing or decreasing? 
- what to do with equal keys? 
- sort only keys or entire records? 
- how to sort non-numerical data? 

* a stable sort is where relative ordering of elements is preserved. 
* a comparison sort as opposed to stable sort does not guarantee that relative ordering is maintained, so if a <= b and b <= a, then either of these could come first in the sorted order. In a stable sort this is not the case and the order is maintained. 
* a comparison sort must have a running time of O(n lg n). 

heapsort: 
- O(n lg n) time to insert all items in a heap 
- O(n lg n) time to extract all items from a heap 
- inplace sort without using any extra memory

mergesort: 
- recursive algorithm which divides and conquers till we get to a single element. 
- then merge the two sorted lists - run linearly through the lists and compare items, pull the smallest item and push it to the new list. 
- time complexity is based on how much work is done per level on the recursion tree - O(n) comparisons are required per level and the number of levels is lg(n) because the number of items are halved at each level. 
- great for sorting linked lists 
- primary disadvantage is that whenever we have to merge, an auxillary array is required to store the result of the merge. 

