Questions on BST/binary trees: 

BST allows fast search and also flexible addition and deletion of nodes. 
However they require more space as compared to arrays because of additional left and right child pointers. 

In a balanced BST, search, insertion, deletion are O(h) where h is the height of the tree. e.g. red-black trees. 

- Consider a binary tree from preorder traversal data with leaf nodes marked as null. 

- Given a preorder and inorder traversal data, reconstruct a binary tree.

- Compute the exterior of a binary tree  

Find the successor of a key in a binary search tree: 

    - check if a right subtree exists for the key: 
        * if it does then get the minimum key of the subtree and return it. 
    - if it does not, then get the parent of the key: 
        * if the parent is non-null and the key is a right child, then update the child and parent by moving one layer up. 
        * if the parent is null or key is non-right child, then return the parent as the successor.

Delete a node from a BST 
    - deleting a leaf node is trivial. 
    - deleting a node with only a left or right child is also trivial. 
    - deleting a node with both children is non trivial
